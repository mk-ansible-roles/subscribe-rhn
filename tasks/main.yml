---

- name: Check Subscription Status
  shell: LANG=C subscription-manager list | awk  ' ( $1 == "Status:" ) { print $2 } ' | sort -u
  register: subscription_status
  changed_when: false

- name: Check for Atomic Host
  stat: path=/run/ostree-booted
  register: atomic_host

- name: make sure registration credentials are provided
  fail:
    msg: "please provide registration credentials for this system"
  when: ( subscription_status.stdout != "Subscribed" ) and ( ((reg_activation_key is not defined) or (reg_organization_id is not defined)) and ((reg_username is not defined ) or (reg_password is not defined)) )

- name: Ensure credentials are installed for Satellite 6 server  "{{ satellite_server }}"
  yum:
    name: "{{ 'https://' +  satellite_server +'/pub/katello-ca-consumer-latest.noarch.rpm' }}"
    state: present
    validate_certs: no
  when: not( (satellite_server is undefined) or (satellite_server is none) or (satellite_server | trim == '') ) and not(atomic_host.stat.exists)
- name: Download katello configurator for Atomic
  get_url:
    url: "{{ 'https://' +  satellite_server +'/pub/katello-rhsm-consumer' }}"
    dest: /tmp/katello-rhsm-consumer
    mode: 0755
    validate_certs: no
  when: atomic_host.stat.exists
- name: Apply katello-rhsm-consumer for Atomic
  shell: '/tmp/katello-rhsm-consumer'
  when: atomic_host.stat.exists

- name: ensure system is registered using known activation key
  redhat_subscription:
    activationkey: "{{ reg_activation_key | default(omit) }}"
    org_id: "{{ reg_organization_id | default(omit)}}"
    pool: "{{ reg_pool | default(omit) }}"
    pool_ids: "{{ reg_pool_ids | default(omit) }}"
    server_insecure: "{{ reg_server_insecure | default('no') }}"
    autosubscribe: "{{ reg_autosubscribe | default(omit) }}"
    username: "{{ reg_username | default(omit) }}"
    password: "{{ reg_password | default(omit) }}"
    state: present
  when: ( subscription_status.stdout != "Subscribed" )

- name: Reset all previous repositories
  shell: |
    subscription-manager repos --disable="*"
    num=0
    for r in /etc/yum.repos.d/*.repo; do
      num=$(( num + $(grep  -c "^enabled.*=.*1$" $r) ))
      sed -i 's/^enabled.*=.*1/enabled = 0/g' $r
      # maybe better remove ...
    done
    echo "$num"
  register: repo_cleanup
  changed_when: repo_cleanup.stdout > 0
  failed_when: repo_cleanup.rc > 0
  when: repo_reset

- name: Set fix osrelease to "{{ reg_osrelease }}"
  shell: |
    if [ "$( LANG=C subscription-manager release | cut -d' ' -f2 )" != "{{ reg_osrelease }}" ]; then
          yum clean all
          subscription-manager release --set={{ reg_osrelease }}
          yum clean all
          # workaround to update redhat.repo appropriately
          subscription-manager repos --list
    else
          exit 90
    fi
  register: rh_release
  changed_when: rh_release.rc == 0
  failed_when: rh_release.rc > 0 and rh_release.rc !=90
  when: not( (reg_osrelease is undefined) or (reg_osrelease is none) or (reg_osrelease | trim == '') )

# TODO: Change functionality to use yum module
- name: check repositories system has access to
  shell: subscription-manager repos --list-enabled
  register: repolist
  changed_when: false


- name: ensure system has access to the right repos
  shell: "subscription-manager repos --enable={{ item }}"
  with_items: "{{ repositories }}"
  when: "repolist.stdout.find('{{ item }}') == -1"

...
